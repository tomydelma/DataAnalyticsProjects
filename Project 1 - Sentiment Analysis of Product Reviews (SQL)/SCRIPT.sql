CREATE TABLE REVIEWS(
			REVIEW VARCHAR(10000),
            RATING INT);
            
USE proyecto1;

-- IMPORT DATASET          
LOAD DATA INFILE 'C:/Users/Tomy/Desktop/Proyectos Personales/Proyecto 1 - SQL Analisis de sentimientos de Resenas/tripadvisor_hotel_reviews.csv' 
INTO TABLE REVIEWS
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SHOW VARIABLES LIKE 'secure_file_priv';
SET SQL_SAFE_UPDATES = 0;

desc reviews;

ALTER TABLE REVIEWS
MODIFY REVIEW VARCHAR(10000) NOT NULL,
MODIFY RATING INT NOT NULL;

-- CREATE ID COLUMN
ALTER TABLE REVIEWS ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY;

SELECT * FROM REVIEWS; -- SHOW COLUMNS AND ROWS

-- NUMBER OF ROWS
SELECT COUNT(*) FROM REVIEWS;

-- AVG RATING
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS;

-- NUMBER OF REVIEWS BY RATING AND PERCENTAGE OF TOTAL
SELECT RATING, COUNT(*) AS AMOUNT, round((COUNT(*) / (SELECT COUNT(*) FROM REVIEWS)),3) * 100 AS PERCENTAGE
FROM REVIEWS 
GROUP BY RATING
ORDER BY RATING; 

-- AVERAGE RATING OF REVIEWS WITH NEGATIVE WORDS
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%BAD%';
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%HORRIBLE%';
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%AWFUL%';
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%DISASTER%';

-- AVERAGE RATING OF REVIEWS WITH POSITIVE WORDS
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%GOOD%';
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%BEAUTIFUL%';
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%EXCELLENT%';
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%GREAT%' AND REVIEW LIKE '%SERVICE%';
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%HAPPY%';

-- AVERAGE RATING OF REVIEWS WITH NEUTRAL WORDS
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%FAMILY%';
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%CHILDREN%';
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%DOGS%';
SELECT AVG(RATING) AS AVERAGE_RATING FROM REVIEWS WHERE REVIEW LIKE '%FOOD%';

-- NUMBER OF POSITIVE COMMENTS

SELECT COUNT(*) AS CANTIDAD FROM reviews WHERE REVIEW LIKE '%EXCELLENT%' AND rating >= 4;
SELECT COUNT(*) AS CANTIDAD FROM reviews WHERE REVIEW LIKE '%BEAUTIFUL%' AND rating >= 4;
SELECT COUNT(*) AS CANTIDAD FROM reviews WHERE REVIEW LIKE '%GREAT%' AND REVIEW LIKE '%SERVICE%' AND rating >= 4;
SELECT COUNT(*) AS CANTIDAD FROM reviews WHERE REVIEW LIKE '%HAPPY%' AND rating >= 4;

-- NUMBER OF NEGATIVE COMMENTS

SELECT COUNT(*) AS AMOUNT FROM reviews WHERE REVIEW LIKE '%BAD%' AND rating <= 2;
SELECT COUNT(*) AS AMOUNT FROM reviews WHERE REVIEW LIKE '%HORRIBLE%' AND rating <= 2;
SELECT COUNT(*) AS AMOUNT FROM reviews WHERE REVIEW LIKE '%AWFUL%' AND REVIEW LIKE '%SERVICE%' AND rating <= 2;
SELECT COUNT(*) AS AMOUNT FROM reviews WHERE REVIEW LIKE '%DISASTER%' AND rating <= 2;

-- NUMBER OF CHARACTERS BY RATING
SELECT RATING, ROUND(AVG(LENGTH(REVIEW)),2) AS CHARACTERS FROM REVIEWS GROUP BY RATING ORDER BY RATING;

-- NUMBER OF WORDS
SELECT 'EXCELLENT' AS Word, COUNT(*) AS AMOUNT FROM REVIEWS WHERE REVIEW LIKE '%EXCELLENT%'
UNION ALL
SELECT 'BAD', COUNT(*) FROM REVIEWS WHERE REVIEW LIKE '%BAD%'
UNION ALL
SELECT 'AWFUL', COUNT(*) FROM REVIEWS WHERE REVIEW LIKE '%AWFUL%'
UNION ALL
SELECT 'GREAT', COUNT(*) FROM REVIEWS WHERE REVIEW LIKE '%GREAT%'
UNION ALL
SELECT 'HAPPY', COUNT(*) FROM REVIEWS WHERE REVIEW LIKE '%HAPPY%';

-- NUMBER OF GOOD AND BAD COMMENTS
SELECT 
    SUM(CASE WHEN REVIEW LIKE '%GOOD%' THEN 1 ELSE 0 END) AS GOOD,
    SUM(CASE WHEN REVIEW LIKE '%BAD%' THEN 1 ELSE 0 END) AS BAD
FROM REVIEWS;

-- RATING DISTRIBUTION

SELECT RATING, ROUND(AVG(LENGTH(REVIEW)), 2) AS AVG_LENGTH
FROM REVIEWS
GROUP BY RATING;

-- WEIGHTED AVERAGE

SELECT 
    SUM(RATING * WEIGHT) / SUM(WEIGHT) AS WEIGHTED_AVERAGE
FROM 
    (SELECT RATING,
        CASE 
            WHEN RATING = 5 THEN 2  -- Asigna pesos según la lógica que necesites
            WHEN RATING = 4 THEN 1
            ELSE 1
        END AS WEIGHT
     FROM REVIEWS) AS subquery;

-- EXPORT CSV 

SELECT * FROM REVIEWS
INTO OUTFILE 'C:/Users/Tomy/Desktop/Proyectos Personales/Proyecto 1 - SQL Analisis de sentimientos de Resenas/Resultados.csv' 
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n';

-- EXPORT FREQ
SET @rownum := 0;

SELECT occurrences, word
FROM (
  SELECT COUNT(*) AS occurrences, SUBSTRING_INDEX(SUBSTRING_INDEX(REVIEW, ' ', numbers.n), ' ', -1) AS word
  FROM (SELECT @rownum := @rownum + 1 AS n 
        FROM (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 
              UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10) numbers) AS numbers
  JOIN REVIEWS ON CHAR_LENGTH(REVIEW) - CHAR_LENGTH(REPLACE(REVIEW, ' ', '')) >= numbers.n - 1
  WHERE SUBSTRING_INDEX(SUBSTRING_INDEX(REVIEW, ' ', numbers.n), ' ', -1) != ''  -- Evita palabras vacías
  GROUP BY word
) AS word_table
ORDER BY occurrences DESC
INTO OUTFILE 'C:/Users/Tomy/Desktop/Proyectos Personales/Proyecto 1 - SQL Analisis de sentimientos de Resenas/Frequency.csv' 
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n';





